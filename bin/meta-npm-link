#!/usr/bin/env node

const async = require('async');
const chalk = require('chalk');
const debug = require('debug')('meta-npm-link');
const exec = require('meta-exec');
const fs = require('fs');
const getMetaFile = require('get-meta-file');
const getPackageDependencies = require('../lib/getPackageDependencies');
const loop = require('loop');
const path = require('path');
const program = require('commander');
const util = require('util');
const _ = require('lodash');

if (process.argv[2] === '--help') {
  return console.log(`\n  usage:\n\n    meta npm link [--all]\n\n  options: \n\n    --all   links all child repositories into meta repo whether listed as dependencies or not.\n`);
}

let all = false;

if (process.argv[2] === '--all') {
  all = true;
}

var meta = getMetaFile();
const metaLocation = path.join(process.cwd(), '.meta');
const metaPackageJson = require(path.join(metaLocation, '..', 'package.json'));
const packages = [];
const projects = meta.projects;

_.forEach(Object.keys(projects), (folder) => {

  const childPackageJson = require(path.join(metaLocation, '..', folder, 'package.json'));

  if (all) {
    metaPackageJson.dependencies[childPackageJson.name] = null;
  }

  packages.push({
    name: childPackageJson.name,
    folder: path.join(metaLocation, '..', folder),
    dependencies: childPackageJson.dependencies,
    devDependencies: childPackageJson.devDependencies,
  });

});

packages.push({
  name: metaPackageJson.name,
  folder: path.join(metaLocation, '..'),
  dependencies: metaPackageJson.dependencies,
  devDependencies: metaPackageJson.devDependencies,
});

const dependencies = getPackageDependencies(packages);

let uniqueFoldersToLink = _.union(dependencies.map((d) => { return d.sourceFolder; }));

console.log(`\nlinking child projects globally`);

loop({
  command: 'npm link',
  directories: uniqueFoldersToLink
}, (err) => {

  console.log();

  console.log(`linking child projects`);

  async.mapSeries(dependencies, (dependency, cb) => {
    exec({
      command: `npm link ${dependency.source}`,
      dir: dependency.targetFolder,
      displayDir: `${dependency.source}->${dependency.target}`,
    }, (err) => {
      if (err) return cb(err);
      return cb();
    });
  }, (err) => {
    if (err) throw err;

  }); 

});